// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Batch.Protocol
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ComputeNodeExtensionOperations.
    /// </summary>
    public static partial class ComputeNodeExtensionOperationsExtensions
    {
            /// <summary>
            /// Gets information about the specified Compute Node Extension.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the Pool that contains the Compute Node.
            /// </param>
            /// <param name='nodeId'>
            /// The ID of the Compute Node that contains the extensions.
            /// </param>
            /// <param name='extensionName'>
            /// The name of the of the Compute Node Extension that you want to get
            /// information about.
            /// </param>
            /// <param name='computeNodeExtensionGetOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static NodeVMExtension Get(this IComputeNodeExtensionOperations operations, string poolId, string nodeId, string extensionName, ComputeNodeExtensionGetOptions computeNodeExtensionGetOptions = default(ComputeNodeExtensionGetOptions))
            {
                return operations.GetAsync(poolId, nodeId, extensionName, computeNodeExtensionGetOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets information about the specified Compute Node Extension.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// The ID of the Pool that contains the Compute Node.
            /// </param>
            /// <param name='nodeId'>
            /// The ID of the Compute Node that contains the extensions.
            /// </param>
            /// <param name='extensionName'>
            /// The name of the of the Compute Node Extension that you want to get
            /// information about.
            /// </param>
            /// <param name='computeNodeExtensionGetOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NodeVMExtension> GetAsync(this IComputeNodeExtensionOperations operations, string poolId, string nodeId, string extensionName, ComputeNodeExtensionGetOptions computeNodeExtensionGetOptions = default(ComputeNodeExtensionGetOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(poolId, nodeId, extensionName, computeNodeExtensionGetOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
